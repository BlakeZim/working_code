'''code for finding the correct corresponding landmarks given BFI and
MRI - not run by itself, '''

import numpy as np
import pickle                   # for loading rigid reg affine

def orig_to_reg(landmark):
    '''takes a set of original landmarks in original pixel coordinates
    (i.e. [pixel HR BFI, voxel MRI]) and converts it to
    [BFI real coords (self reg), voxel real coords]'''
    pass



def get_new_landmarks(block, orig=False):
    '''returns the landmark corresponance between the blockface
    imaging and the MRI

    Takes block = {1, 2, 3, 4} argument plus the downsampling (default
    is 8)'''

    # downsampling doesnt matter because we convert all the landmarks
    # to real coordinates, so as long as the data has correct spacing
    # (which depends on the downsampling), we should be fine.  We do
    # some division by 8 (which is the normally downsampled data), but
    # thats because the affine registration was done on those images,
    # so photo_rigid_transformations relies on that grid

    # landmarks matching the high res data from
    # /home/sci/crottman/korenberg/data/photo/seg_high_res_crop/color/block2
    # and the MRI data from
    # /home/sci/crottman/korenberg/results/MRI/brain_seg.mha
    #
    # these are the landmarks given to me by Julie
    #
    # [pixel HR BFI, voxel MRI]
    # if block == 1:              # 12
    #     landmarks = [[[1826.0, 1754.5, 7470], [158.43, 22, 125.21]],
    #                  [[2238.5, 1716.0, 9780], [179.31, 32, 127.27]],
    #                  [[1639.0, 1133.0, 11820], [158.54, 37, 89.375]],
    #                  [[2398.0, 1668.0, 14910], [143.8, 53, 123.2]],
    #                  [[1994.0, 1492.0, 13110], [127.26, 43, 109.43]],
    #                  [[2668.0, 2512.0, 15570], [148.53, 56, 171.67]],
    #                  [[2532.0, 1986.0, 13440], [147.76, 47, 141]],
    #                  [[2096.0, 1478.0, 14070], [132.05, 47, 108.56]],
    #                  [[2372.0, 1008.0, 16860], [149.09, 53, 88.092]],
    #                  [[3193.5, 2241.0, 16710], [177.06, 59, 162.33]],
    #                  [[2397.0, 2235.0, 12780], [140.32, 46, 152.06]],
    #                  [[2662.0, 2658.0, 15570], [146.59, 56, 177.68]]
    #                  ]
    if block ==1:
        landmarks = [[[2522.60336538,1315.15771902,6871.10693359],[158.43, 22, 125.21]],
                     [[2987.42334402,1229.36865652,9881.06542969],[179.31, 32, 127.27]],
                     [[2438.39059161,577.50814637,12034.25976562],[158.54, 37, 89.375]],
                     [[2354.12433226,1311.07271635,14710.29980469],[143.8, 53, 123.2]],
                     [[1906.85867805,1171.23530983,12912.47460938],[127.26, 43, 109.43]],
                     [[2718.82291667,2143.2850227,15241.23730469],[148.53, 56, 171.67]],
                     [[2497.11044338,1654.34309896,13280.20605469],[147.76, 47, 141]],
                     [[2003.25730335,1151.70072115,13824.54931641],[132.05, 47, 108.56]],
                     [[2298.45469418,629.74238782,16997.55175781],[149.09, 53, 88.092]],
                     [[3182.02577457,1813.38330495,15916.63476563],[177.06, 59, 162.33]],
                     [[2393.5100828,1908.59584085,12689.05053711],[140.32, 46, 152.06]],
                     [[2722.94484509,2282.91720085,15419.27734375],[146.59, 56, 177.68]]]




    elif block == 2:            # 22
        landmarks = [[[1692.0, 1798.0, 5460], [122.54, 78, 131.64]],
                     [[1808.0, 788.0, 2940], [138.64, 71, 74.479]],
                     [[3440.0, 2412.0, 9960], [189.92, 102, 164.8]],
                     [[1692.0, 1734.0, 5940], [123.53, 80, 128.11]],
                     [[1764.0, 1830.0, 5850], [126.11, 80, 134.28]],
                     [[1392.0, 1569.0, 6600], [106.61, 82, 117.43]],
                     [[1192.0, 2012.0, 10320], [76.206, 91, 126.36]],
                     [[1800.0, 2410.0, 4200], [127.03, 75, 162.93]],
                     [[1392.0, 2720.0, 7650], [101.41, 83, 176.69]],
                     [[712.0, 1640.0, 8190], [73.153, 83, 116.31]],
                     [[1696.5, 2634.0, 5430], [118.11, 78, 178.81]],
                     [[1873.5, 2647.5, 11670], [108.84, 100, 167.84]],
                     [[1885.5, 2374.5, 11430], [109.71, 100, 152.28]],
                     [[1796.7, 2032.7, 10890], [107.55, 96, 133.46]],
                     [[1579.5, 1597.5, 11610], [99.954, 98, 106.04]],
                     [[1258.0, 2050.0, 2310], [101.68, 64, 140.72]],
                     [[1918.5, 1713.0, 8820], [132.3, 91, 127.57]],
                     [[1372.5, 2796.0, 6630], [101.52, 79, 182.85]],
                     [[1282.0, 970.0, 12540], [88.143, 100, 72.372]],
                     [[1716.0, 1570.0, 6480], [123.78, 82, 127.5]],
                     [[1790.0, 1818.0, 6360], [127.3, 82, 134.34]],
                     [[1358.0, 1940.0, 10230], [87.009, 91, 125.07]]
                     ]

    #### BLAKE NEW ATTEMPT AT LANDMARKS #####
    # elif block == 2:
    #     landmarks = [[[1688.0,1704.0,5130],[122.54,78,131.64]],
    #                  [[1872.0,592.0,3000],[138.64,71,74.479]],
    #                  [[1696.0,1616.0,5640],[123.53,80,128.11]],
    #                  [[1744.0,1728.0,5550],[126.11,80,134.28]],
    #                  [[1424.0,1472.0,6000],[106.61,82,117.43]],
    #                  [[808.0,1760.0,9810],[76.206,91,126.36]],
    #                  [[1672.0,2544.0,5220],[118.11,78,178.81]],
    #                  [[1472.0,2392.0,11670],[108.84,100,167.84]],
    #                  [[1456.0,2136.0,11190],[109.71,100,152.28]],
    #                  [[1400.0,1792.0,10410],[107.55,96,133.46]],
    #                  [[1200.0,1256.0,11340],[99.954,98,106.04]],
    #                  [[1288.0,1912.0,1890],[101.68,64,140.72]],
    #                  [[1360.0,2680.0,6390],[101.52,79,182.85]],
    #                  [[920.0,688.0,11310],[88.143,100,72.372]],
    #                  [[1704.0,1624.0,6180],[123.78,82,127.5]],
    #                  [[1760.0,1712.0,6030],[127.3,82,134.34]],
    #                  [[992.0,1752.0,9720],[87.009,91,125.07]]
    #                  ]


    #######################

    elif block == 3:
        landmarks = [[[1851.62879357,1991.99500033,3705.06347656],[120.45,118,131.66]],
                     [[1524.91439637,1126.08987714,3463.581604],[119.84,121,83.647]],
                     [[2782.59481838,2264.22305689,2796.15209961],[158.59,119,161.38]],
                     [[901.1676015,1244.17935363,4935.58862305],[87.865,122,76.284]],
                     [[1909.73646585,1925.96554226,4652.20556641],[123.25,120,130.49]],
                     [[2609.97662927,2834.66399573,5220.45776367],[141.11,125,187.6]],
                     [[1471.62680288,1129.20699786,2732.40942383],[116.62,116,84.199]],
                     [[2762.40110844,2390.66673344,1642.92230225],[154.47,114,169.05]]]












    # elif block == 3:            # 8
    #     landmarks = [[[1915.5, 1941.0, 3960], [120.45, 118, 131.66]],
    #                  [[1566.0, 1114.0, 3660], [119.84, 121, 83.647]],
    #                  [[2814.0, 2229.0, 2850], [158.59, 119, 161.38]],
    #                  [[950.0, 1212.0, 4680], [87.865, 122, 76.284]],
    #                  [[1960.0, 1908.0, 4620], [123.25, 120, 130.49]],
    #                  [[2804.0, 2600.0, 3570], [141.11, 121, 187.6]],
    #                  [[1530.0, 1130.0, 2850], [116.62, 116, 84.199]],
    #                  [[2788.0, 2394.0, 1710], [154.47, 114, 169.05]],
    #                  ]



    elif block == 4:            # 20
        # landmarks = [[[2866.0, 2644.0, 1950], [148.46, 132, 184.62]],
        #              [[1658.0, 2054.0, 5700], [105.51, 145, 126.21]],
        #              [[1944.0, 2282.0, 6000], [114.69, 145, 144.58]],
        #              [[3076.5, 1476.0, 9030], [192.09, 158, 136.95]],
        #              [[2034.0, 1388.0, 21270], [135.86, 207, 114.8]],
        #              [[2600.0, 2352.0, 9330], [143.9, 157, 161.09]],
        #              [[1431.0, 1312.5, 8100], [107.61, 156, 93.076]],
        #              [[2582.0, 1350.0, 20100], [165.34, 194, 111.29]],
        #              [[2362.0, 1046.0, 18270], [154.86, 201, 104.98]],
        #              [[898.0, 2026.0, 13200], [75.349, 179, 116.18]],
        #              [[2086.0, 1754.0, 1140], [133.67, 128, 125.02]],
        #              [[2278.5, 2412.0, 1440], [130.17, 128, 154.87]],
        #              [[1432.0, 1436.0, 6360], [103.74, 150, 96.354]],
        #              [[2288.0, 2292.0, 7710], [133.86, 151, 146.39]],
        #              [[1902.0, 1516.0, 13860], [123.94, 180, 115.41]],
        #              [[1798.0, 2586.0, 15600], [103.14, 178, 162.73]],
        #              [[2334.0, 1998.0, 8670], [142.76, 156, 135.61]],
        #              [[1686.0, 2314.0, 3960], [102.09, 138, 140.24]],
        #              [[1782.0, 1953.0, 4740], [121.03, 141, 139.15]],
        #              [[1588.0, 784.0, 12330], [125.43, 174, 71.346]],
        #              ]
        # these are not reversed:
        # return [[[-4978.7969255009493, -14291.195548170297, -10974.191228834581], [-49.0, 8.5, -34.7]],
        #         [[12955.285489863672, 6782.6667541970291, -9608.9022334155761], [-7.2, 8.5, 54.2]],
        #         [[-3529.4124992429142, -21992.693397096813, 21.610449345362213], [-71.0, 49.5, -37.5]],
        #         [[1375.0854059966568, -2424.3665112550225, -644.14053162552591], [-19.0, 41.9, 6.5]],
        #         [[-1904.9849544357239, 19756.728151140465, -9850.3999775772809], [62.5, 14.2, 31.5]],
        #         [[-19978.084988611834, 1193.8850080611674, -5171.9937461739564], [27.5, 34.7, -46.5]],
        #         [[4876.4172072069205, 12908.96310608848, 3440.3626957034357], [23.1, 59.2, 35.5]],
        #         [[9048.4258535122353, -3346.5882992785419, -1034.3280093132544], [-31.4, 38.6, 31.5]],
        #         [[-18786.106171386909, 4379.237425767692, -11754.583853417926], [30.0, 2.5, -46.9]],
        #         [[-3987.5298698229044, 1771.7456071262263, -11229.664187291755], [5.5, 2.5, -3.1]],
        #         [[4053.8534067774444, 18364.900285395477, -9103.886061444251], [47.0, 13.5, 49.5]],
        #         [[-4253.4490262881664, 1858.4383859028028, -10978.167005247227], [5.9, 2.5, -3.6]],
        #         [[-4424.9749261128964, -14276.880981292834, -10691.448917965858], [-49.8, 7.5, -31.7]],
        #         [[-7431.4216598651183, 12080.35048564759, 5666.7585269799256], [44.3, 64.0, -6.5]],
        #         [[-11750.706201447651, -6425.4834199773559, 2206.6704343840447], [-15.9, 53.8, -37.5]],
        #         [[-9553.0213692492798, -8271.5033718832747, 9617.0907338800625], [-26.4, 82.5, -30.5]],
        #         [[5646.7187209368558, -5709.066465405941, 1405.149115939319], [-32.7, 48.5, 18.8]],
        #         [[-3045.289844922052, -15641.47673776804, 2829.7547401188876], [-48.7, 62.5, -21.5]],
        #         [[1714.4211894935061, -2015.5792753776332, -1241.3595924584788], [-17.8, 40.5, 9.4]],
        #         [[9630.4167197410025, 14435.741532626829, 3212.6170714054715], [18.9, 51.5, 58.5]]
        #     ]
        # these are properly reversed:
        return [[[-9305.5569124382746, -926.00166826035411, -1138.4258596439486], [20.6, 44.5, 8.6]],
                [[5111.9588267015597, 14394.506928486426, 3027.1478194585925], [-19.2, 52.5, -50.8]],
                [[5319.0894148311518, -5334.2601974636691, 364.14433790943804], [-31.0, 45.5, 17.4]],
                [[-1540.0662948951845, 9674.0229935199168, 8068.2477026551223], [1.5, 75.5, -27.6]],
                [[-11142.733858577409, 1.7009214676677402, 7385.7016125897044], [23.9, 75.5, 5.5]],
                [[6554.2612007950547, 7535.3030659200731, 10931.232554415083], [-31.3, 84.5, -25.4]],
                [[-4386.1442975165064, 8445.52207500855, 11032.014096545239], [8.4, 85.5, -20.4]],
                [[14983.7843151907, 687.38589765583129, 1458.8393813034727], [-59.7, 49.5, -11.3]],
                [[2710.4518412050411, -14587.200900390035, 1278.0350246270846], [-28.6, 48.5, 54.1]],
                [[11305.014583188564, 12733.418672147429, -12354.181250633284], [-39.3, -3.5, -53.8]],
                ]

    else:
        raise Exception("invalid block number")

    if orig:
        return landmarks

    # Convert to LR landmarks
    #
    # landmarks matching the low res 8 data from (w/ numpy x/y)
    # /home/sci/crottman/korenberg/data/photo/seg_low_res_crop/color/block2
    # and the MRI data from
    # /home/sci/crottman/korenberg/results/MRI/brain_seg.mha
    #
    for ptpair in landmarks:
        ptpair[0][0:2] = ptpair[0][-2:-4:-1] # switch x and y
        ptpair[0][0] /= 8.0
        ptpair[0][1] /= 8.0
    f = open("photo_rigid_transformations_" + str(block) + ".pkl", 'r')
    Adict = pickle.load(f)
    f.close()
    # Transform landmarks by rigid transform from photorigidtransformations
    for lm in landmarks:
        if lm[0][2] in Adict.keys():
            A = Adict[lm[0][2]]
            origin = Adict['origin']
            B = np.array(A)
            # print "landmark ", i, "found!!!"
            # print "previous landmark: ", lm[0]
            # Apply affine transformation to landmark
            lm[0][0:2] = np.dot(B, [lm[0][0]-origin[0], lm[0][1]-origin[1], 1.0])[0:2]
            lm[0][0] += origin[0]
            lm[0][1] += origin[1]
            # print "new landmark: ", lm[0], "\n"

            # [block2_reg_blanks pixels, MRI voxels]

            # convert to real coordinates
            # [block2_reg_blanks Real, MRI voxels]

    # Convert to World Coordinates
    for lm in landmarks:
        # the spacing for the HR BFI data is [117, 117, 30]
        lm[0][0] = lm[0][0]*117
        lm[0][1] = lm[0][1]*117

    bfspacing = np.array([117, 117, 30])
    if block == 1:
        bfsize = np.array([480, 480, 585])
    elif block == 2:
        bfsize = np.array([480, 480, 419])
    elif block == 3:
        bfsize = np.array([480, 480, 165])
    elif block == 4:
        bfsize = np.array([480, 480, 874])

    # origins are center of the block
    bforigin = -(bfsize-1)/2.0*bfspacing
    mriorigin = -255.0/2.0*np.array([1.0, 1.0, 1.0])

    for lm in landmarks:
        lm[0][0] += bforigin[0]
        lm[0][1] += bforigin[1]
        lm[0][2] += bforigin[2]
        lm[1][0] = round(lm[1][0] + mriorigin[0], 2) # just an annoyance :(
        lm[1][1] = round(lm[1][1] + mriorigin[1], 2)
        lm[1][2] = round(lm[1][2] + mriorigin[2], 2)

    return landmarks
